<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         id="WebApp_ID" version="2.5">

  <!--<display-name></display-name>定义了WEB应用的名字,提供GUI工具可能会用来标记这个特定的Web应用的一个名称   -->
  <display-name>Archetype Created Web Application</display-name>

  <!--转码，将其他码转为UTF-8-->
  <!--filter过滤器元素将一个名字与一个实现javax.servlet.Filter接口的类相关联-->
  <!-- 在Spring框架中是如何解决从页面传来的字符串的编码问题的呢？
  下面我们来看看Spring框架给我们提供过滤器CharacterEncodingFilter
  这个过滤器就是针对于每次浏览器请求进行过滤的，然后再其之上添加了父类没有的功能即处理字符编码。
  其中encoding用来设置编码格式，forceEncoding用来设置是否理会 request.getCharacterEncoding()方法，设置为true则强制覆盖之前的编码格式。-->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <!--<filter-mapping></filter-mapping> 一旦命名了一个过滤器，就要利用filter-mapping元素把它与一个或多个servlet或JSP页面相关联。 -->
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!--监听web容器的启动和关闭-->
  <!--<listener></listener>servlet API的版本2.3增加了对事件监听程序的支持，事件监听程序在建立、修改和删除会话或servlet环境时得到通知。Listener元素指出事件监听程序类。 -->
  <listener>
    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
  </listener>

  <!--将web容器和spring容器进行整合的监听器，ContextLoaderListener通过加载applicationContext.xml文件进行整合-->
  <!-- 项目中使用Spring 时，applicationContext.xml配置文件中并没有BeanFactory，要想在业务层中的class 文件中直接引用Spring容器管理的bean可通过以下方式-->
  <!--1、在web.xml配置监听器ContextLoaderListener-->
  <!--ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。
  在ContextLoaderListener中关联了ContextLoader这个类，所以整个加载配置过程由ContextLoader来完成。
  它的API说明
  第一段说明ContextLoader可以由 ContextLoaderListener和ContextLoaderServlet生成。
  如果查看ContextLoaderServlet的API，可以看到它也关联了ContextLoader这个类而且它实现了HttpServlet    这个接口
  第二段，ContextLoader创建的是 XmlWebApplicationContext这样一个类，它实现的接口是WebApplicationContext->ConfigurableWebApplicationContext->ApplicationContext->
  BeanFactory这样一来spring中的所有bean都由这个类来创建
   IUploaddatafileManager uploadmanager = (IUploaddatafileManager)
   ContextLoaderListener.getCurrentWebApplicationContext().getBean("uploadManager");-->
  <listener>
    <!-- 该监听器将在Web容器启动时激活Spring -->
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <!--value指向了spring的配置文件,context-param元素声明应用范围内的初始化参数-->
  <!--2、部署applicationContext的xml文件-->
  <!--如果在web.xml中不写任何参数配置信息，默认的路径是"/WEB-INF/applicationContext.xml，
  在WEB-INF目录下创建的xml文件的名称必须是applicationContext.xml。
  如果是要自定义文件名可以在web.xml里加入contextConfigLocation这个context参数：
  在<param-value> </param-value>里指定相应的xml文件名，如果有多个xml文件，可以写在一起并以“,”号分隔。
  也可以这样applicationContext-*.xml采用通配符，比如这那个目录下有applicationContext-ibatis-base.xml，
  applicationContext-action.xml，applicationContext-ibatis-dao.xml等文件，都会一同被载入。
  在ContextLoaderListener中关联了ContextLoader这个类，所以整个加载配置过程由ContextLoader来完成。-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
      classpath:applicationContext.xml
    </param-value>
  </context-param>

  <!--spring的一个配置，*.do的请求都会被拦截，load-on-startup>=0时，容器在启动时，就会初始化这个servlet,调用它的init方法。
  当<0或不指定时，只有当dispatcher被使用时才会被加载。此处的1代表优先级-->
  <!--<load-on-startup></load-on-startup>指定当Web应用启动时，装载Servlet的次序。
  当值为正数或零时：Servlet容器先加载数值小的servlet，再依次加载其他数值大的servlet.
  当值为负或未定义：Servlet容器将在Web客户首次访问这个servlet时加载它 -->
  <!--在向servlet或JSP页面制定初始化参数或定制URL时，必须首先命名servlet或JSP页面。Servlet元素就是用来完成此项任务的-->
  <!--DispatcherServlet前置控制器,拦截匹配的请求，Servlet拦截匹配规则要自已定义，把拦截下来的请求，依据某某规则分发到目标Controller(我们写的Action)来处理。-->-->
  <servlet>
    <servlet-name>dispatcher</servlet-name>
    <!--在DispatcherServlet的初始化过程中，框架会在web应用的 WEB-INF文件夹下寻找名为[servlet-name]-servlet.xml 的配置文件，生成文件中定义的bean。-->
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--可以通过下面的语句修改WEB-INF下的dispatcher-servlet.xml文件名
    <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/xx</param-value>
    </init-param>
    -->
    <load-on-startup>1</load-on-startup>
    <!--是启动顺序，让这个Servlet随Servlet容器一起启动。-->
  </servlet>


  <!--服务器一般为servlet提供一个缺省的URL：http://host/webAppPrefix/servlet/ServletName.
  但是，常常会更改这个URL，以便servlet可以访问初始化参数或更容易地处理相对URL。在更改缺省URL时，使用servlet-mapping元素。-->
  <servlet-mapping>
    <!--这个Servlet的名字是dispatcher，可以有多个DispatcherServlet，是通过名字来区分的。每一个DispatcherServlet有自己的WebApplicationContext上下文对象。同时保存的ServletContext中和Request对象中.-->
    <!--ApplicationContext是Spring的核心，Context我们通常解释为上下文环境，我想用“容器”来表述它更容易理解一些，ApplicationContext则是“应用的容器”了:P，Spring把Bean放在这个容器中，在需要的时候，用getBean方法取出-->
    <servlet-name>dispatcher</servlet-name>
    <!--Servlet拦截匹配规则可以自已定义，当映射为@RequestMapping("/user/add")时，为例,拦截哪种URL合适？-->
    <!--1、拦截*.do、*.htm， 例如：/user/add.do,这是最传统的方式，最简单也最实用。不会导致静态文件（jpg,js,css）被拦截。-->
    <!--2、拦截/，例如：/user/add,可以实现现在很流行的REST风格。很多互联网类型的应用很喜欢这种风格的URL。弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。 -->
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>

</web-app>

